version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: garazzo_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-garazzo}
      POSTGRES_USER: ${POSTGRES_USER:-garazzo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-garazzo_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - garazzo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-garazzo_user} -d ${POSTGRES_DB:-garazzo}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:6
    container_name: garazzo_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-garazzo_admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-garazzo_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-garazzo}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - garazzo_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: garazzo_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-garazzo_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - garazzo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MQTT Broker
  mqtt:
    image: eclipse-mosquitto:2
    container_name: garazzo_mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt/config:/mosquitto/config
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    networks:
      - garazzo_network
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: garazzo_backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-garazzo_user}:${POSTGRES_PASSWORD:-garazzo_password}@postgres:5432/${POSTGRES_DB:-garazzo}
      - MONGODB_URI=mongodb://${MONGO_USER:-garazzo_admin}:${MONGO_PASSWORD:-garazzo_password}@mongodb:27017/${MONGO_DB:-garazzo}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-garazzo_password}@redis:6379
      - MQTT_BROKER_URL=mqtt://mqtt:1883
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      mqtt:
        condition: service_healthy
    networks:
      - garazzo_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: ${API_URL:-http://localhost:3001}
        REACT_APP_SOCKET_URL: ${SOCKET_URL:-http://localhost:3001}
    container_name: garazzo_web
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - garazzo_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: garazzo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
      - backend
    networks:
      - garazzo_network
    restart: unless-stopped

  # Certbot SSL
  certbot:
    image: certbot/certbot
    container_name: garazzo_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx

networks:
  garazzo_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  mqtt_data:
  mqtt_logs: